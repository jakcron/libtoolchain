PaddingSource(0x20, 0xff);


NativeFileSystem nfs;


FileStream file(Path("~/Desktop/rom.nca"), tc::fs::READ, NativeFileSystem());

FileStream(const Path& path, openmode = tc::fs::READ, IFileSystem& fs = NativeFileSystem())

Types of files:
* Files in the native file system (/home/jakcron/afile.bin)
* files that exist in filesystems contained in a single file (/afile.bin within /home/jakcron/arc.zip)
* Emphemeral files that exist only in memory
* Logical files that do not exist in memory but are deterministic in their content
* Files that wrap other files

Maybe I need a distinciton between "real" files and logical/Emphemeral/wrapped files

Real files rely on a filesystem
Logical files do not

// fake file
EphemeralFileStream file(0x1000) : public IFileStream

file.read();
file.write()
file.close()?

// wrapper file
AesCtr128Stream file(EphemeralFileStream(0x1000), Aes128Key(), AesCtrIv())

file.read()
file.write()

// Real file
NativeFileStream file(Path("my/file/is/here.txt"))
file.read()
file.write()

// Archive file
RomfsFileSystem mRomfs()
RomfsFileStream file(mRomfs, Path("my/file/is/here.txt"))
file.read()



// What if we don't know what file system we're using and we just have a IFileSystem*?
// There is no avoiding it, a generic FileStream class is required
FileSystem fs(const tc::SharedPtr<IFileSystem>& filesystem)
FileStream file(const FileSystem& fs, const Path& path, openmode)

FileStream myFile = FileStream(fs, Path("/my/file/path/is/this.txt"), tc::fs::READ | tc::fs::WRITE);

FileStream(...)
{
	mFileStream = fs.openFile(path, open_mode);
}

void read(...)
{
	mFileStream->read(...)
}

myFile.read(myBuf, myBufLen);


RomfsFileSystem mRomFs(mRomfsRawFileStream)
FileStream myFile = FileStream(mRomFs, Path(), OpenMode::READ)
tc::SharedPtr<IInputStream> input = mRomFs->openFile(Path("/my/file.txt), OpenMode::READ);
tc::SharedPtr<IInputStream> input = EphemeralFileStream(0x1000);

// it would seem to be that IFileStream should have the definition for open modes
ZipArchiveReader zip(const tc::SharedPtr<IFileStream>& raw_archive)

FileStream myFile(MountPoint(), Path("/CoreModules/"))





